{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "(qs-1nltbq5f3) OpenShift+VPC, License: Apache 2.0(Please do not remove) September, 25, 2017",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [{
        "Label": {
          "default": "Network Configuration"
        },
        "Parameters": [
          "VPCID",
          "VPCCIDR",
          "PublicSubnet1ID",
          "RemoteAccessCIDR"
        ]
      },
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "KeyPairName"
          ]
        },
        {
          "Label": {
            "default": "OpenShift Nodes Configuration"
          },
          "Parameters": [
            "NumberOfMaster",
            "NumberOfNodes",
            "MasterInstanceType",
            "NodesInstanceType"
          ]
        },

        {
          "Label": {
            "default": "AWS Quick Start Configuration"
          },
          "Parameters": [
            "Bucket",
            "EcsClusterName"
          ]
        }
      ],
      "ParameterLabels": {
        "KeyPairName": {
          "default": "SSH Key Name"
        },

        "PublicSubnet1ID": {
          "default": "Public Subnet 1 ID"
        },
        "PublicSubnet2ID": {
          "default": "Public Subnet 2 ID"
        },
        "Bucket": {
          "default": "Quick Start S3 Bucket Name"
        },
        "EcsClusterName": {
          "default": "Quick Start S3 Key Prefix"
        },
        "RemoteAccessCIDR": {
          "default": "Allowed External Access CIDR"
        },
        "VPCID": {
          "default": "VPC ID"
        },
        "VPCCIDR": {
          "default": "VPC CIDR"
        },
        "MasterInstanceType": {
          "default": "Master Instance Type"
        },
        "NodesInstanceType": {
          "default": "Nodes Instance Type"
        },
        "NumberOfMaster": {
          "default": "Number of Masters"
        },
        "NumberOfNodes": {
          "default": "Number of Nodes"
        }
      }
    }
  },
  "Parameters": {
    "KeyPairName": {
      "Description": "Name of an existing EC2 key pair. All instances will launch with this key pair.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "PublicSubnet1ID": {
      "Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet2ID": {
      "Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)",
      "Type": "AWS::EC2::Subnet::Id"
    },

    "VolumeSize": {
      "Description" : "Size of attached volume",
      "Type": "Number",
      "Default": "50"
    },

    "Bucket": {
      "Description": "S3 bucket name.",
      "Type": "String",
      "Default": "nuodb-oa-cloud-deployment"
    },
    "EcsClusterName": {
      "Description": "S3 key prefix for the Quick Start assets",
      "Type": "String",
      "Default": "none"
    },
    "RemoteAccessCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Description": "The CIDR IP range that is permitted to access the instances We recommend that you set this value to a trusted IP range.",
      "Type": "String",
      "Default" : "0.0.0.0/0"
    },

    "VPCCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.0.0/16",
      "Description": "CIDR block for the VPC",
      "Type": "String"
    },
    "VPCID": {
      "Description": "ID of your existing VPC for deployment",
      "Type": "AWS::EC2::VPC::Id"
    },

    "CWLogGroup" : {
      "Type" : "String",
      "Default": "none"
    },

    "SpotPrice" : {
      "Type" : "Number",
      "Default" : "0.20"
    },

    "MasterInstanceType": {
      "Default": "m4.large",
      "AllowedValues": [
        "t2.large",
        "m4.large",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge"
      ],
      "ConstraintDescription": "Must contain valid instance type",
      "Description": "Type of EC2 instance for the Master instances",
      "Type": "String"
    },

    "NodesInstanceType": {
      "Default": "r4.4xlarge",
      "AllowedValues": [
        "t2.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r4.large",
        "r4.xlarge",
        "r4.2xlarge",
        "r4.4xlarge",
        "r4.8xlarge"
      ],
      "ConstraintDescription": "Must contain valid instance type",
      "Description": "Type of EC2 instance for the Node instances",
      "Type": "String"
    },
    "NumberOfMaster": {
      "Default": "1",
      "Description": "This Deployment requires 3 OpenShift Master instances",
      "Type": "Number",
      "AllowedValues": ["1","2","3"]
    },
    "NumberOfNodes": {
      "Default": "6",
      "Description": "The desired capacity for the OpenShift node instances",
      "Type": "Number"
    },
    "Hostname" : {
      "Type" : "String"
    },
    "CustomerID" : {
      "Type" : "String"
    }
  },
  "Rules": {
    "SubnetsInVPC": {
      "Assertions": [{
        "Assert": {
          "Fn::EachMemberIn": [{
            "Fn::ValueOfAll": [
              "AWS::EC2::Subnet::Id",
              "VpcId"
            ]
          },
            {
              "Fn::RefAll": "AWS::EC2::VPC::Id"
            }
          ]
        },
        "AssertDescription": "All subnets must in the VPC"
      }]
    }
  },
  "Mappings": {
    "AWSAMIRegionMap": {
	"AMI": {
            "CENTOS7HVM": "RHEL-7.4_HVM_GA-20170808-x86_64-2-Hourly2-GP2"
	},
	"ap-northeast-1" : {
	    "CENTOS7HVM": "ami-3185744e"
	},
	"ap-northeast-2" : {
	    "CENTOS7HVM": "ami-46963e28"
	},
	"ap-south-1": {
	    "CENTOS7HVM": "ami-48301d27"
	},
	"ap-southeast-1": {
            "CENTOS7HVM": "ami-da6151a6"
	},
	"ap-southeast-2": {
            "CENTOS7HVM": "ami-0d13c26f"
	},
	"ca-central-1": {
            "CENTOS7HVM": "ami-456aea21"
	},
	"eu-central-1": {
            "CENTOS7HVM": "ami-9a183671"
	},
	"eu-west-1": {
            "CENTOS7HVM": "ami-4c457735"
	},
	"eu-west-2": {
            "CENTOS7HVM": "ami-4726cb20"
	},
	"eu-west-3": {
            "CENTOS7HVM": "ami-6276c71f"
	},
	"sa-east-1": {
            "CENTOS7HVM": "ami-c2e6baae"
	},
	"us-east-1": {
            "CENTOS7HVM": "ami-d5bf2caa"
	},
	"us-east-2": {
            "CENTOS7HVM": "ami-77724e12"
	},
	"us-west-1": {
            "CENTOS7HVM": "ami-3b89905b"
	},
	"us-west-2": {
            "CENTOS7HVM": "ami-5490ed2c"
	}
    },
    "ARNNamespace": {
      "ap-northeast-1": { "Partition": "aws" },
      "ap-northeast-2": { "Partition": "aws" },
      "ap-south":       { "Partition": "aws" },
      "ap-southeast-1": { "Partition": "aws" },
      "ap-southeast-2": { "Partition": "aws" },
      "ca-central-1":   { "Partition": "aws" },
      "eu-central-1":   { "Partition": "aws" },
      "eu-west-1":      { "Partition": "aws" },
      "eu-west-2":      { "Partition": "aws" },
      "eu-west-3":      { "Partition": "aws" },
      "sa-east-1":      { "Partition": "aws" },
      "us-east-1":      { "Partition": "aws" },
      "us-east-2":      { "Partition": "aws" },
      "us-west-2":      { "Partition": "aws" },
      "us-west-1":      { "Partition": "aws" },
      "us-gov-west-1":  { "Partition": "aws-us-gov" }
    }
  },
  "Conditions": {
    "GovCloudCondition": {
      "Fn::Equals": [{
        "Ref": "AWS::Region"
      },
        "us-gov-west-1"
      ]
    },
    "HasHostedZone" : { "Fn::Not": [{"Fn::Equals" : [{ "Ref" : "Hostname" },   "NONE"]}]}
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "lambda_policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
              {
                "Effect": "Allow",
                "Action": [
                  "cloudformation:DescribeStacks"
                ],
                "Resource": "*"
              }
            ]
          }
        }
        ]
      }
    },
    "KeyGen": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "quickstart-reference-lambda-${AWS::Region}"
          },
          "S3Key": {
            "Fn::Sub": "generate_sshkeys/genrsa_lambda.zip"
          }
        },
        "Handler": "service.handler",
        "Runtime": "python2.7",
        "Timeout": "5",
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        }
      }
    },
    "GetRSA": {
      "Type": "Custom::GenerateKeys",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": ["KeyGen", "Arn"]
        },
        "ResponseURL": {
          "Fn::Join": ["", ["http://ResponseURL",
            {
              "Ref": "AWS::StackId"
            }, "RequestId"
          ]]
        },
        "StackId": {
          "Ref": "AWS::StackId"
        },
        "ResourceProperties": {
          "RequestType": "Create",
          "RequestId": {
            "Fn::Join": ["", [{
              "Ref": "AWS::StackId"
            }, "RequestId"]]
          },
          "LogicalResourceId": "KeyGenLogicalResourceId"
        }

      },
      "DependsOn": ["KeyGen"]
    },
    "OpenShiftSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to the Workload instances",
        "VpcId": {
          "Ref": "VPCID"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "-1",
          "CidrIp": {
            "Ref": "VPCCIDR"
          }
        },
          {
            "IpProtocol": "tcp",
            "FromPort": "8443",
            "ToPort": "8444",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          }
        ]
      }
    },
    "OpenShiftInternalSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to the Workload instances",
        "VpcId": {
          "Ref": "VPCID"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "-1",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },
    "SetupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ec2.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "aws-quick-start-s3-policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Action": [
                "s3:GetObject",
                "s3:List*"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${Bucket}*"
              },
              "Effect": "Allow"
            }]
          }
        },
          {
            "PolicyName": "WorkloadSetup",
            "PolicyDocument": {
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "autoscaling:Describe*",
                  "autoscaling:AttachLoadBalancers",
                  "ec2:Describe*"
                ],
                "Resource": "*"
              }]
            }
          },
          {
            "PolicyName": "createandattachvolume",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1441831086000",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AttachVolume",
                    "ec2:CreateVolume",
                    "ec2:DescribeVolumes",
                    "ec2:CreateTags",
                    "ec2:ModifyInstanceAttribute"
                  ],
                  "Resource": [ "*" ]
                }
              ]
            }
          }
        ]
      }
    },
    "SetupRoleProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "SetupRole"
        }]
      }
    },
    "OpenShiftMasterASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [ "OpenShiftNodeASG", "OpenShiftMasterELB"],
      "Properties": {
        "LoadBalancerNames": [{
          "Ref": "OpenShiftMasterELB"
        }],
        "DesiredCapacity": {
          "Ref": "NumberOfMaster"
        },
        "MaxSize": "3",
        "MinSize": "1",
        "LaunchConfigurationName": {
          "Ref": "OpenShiftMasterASLaunchConfig"
        },
        "Tags": [{
          "Key": "Name",
          "PropagateAtLaunch": "true",
          "Value": "openshift-master"
        }],
        "VPCZoneIdentifier": [
          {"Ref": "PublicSubnet1ID"},
          {"Ref": "PublicSubnet2ID"}
        ]
      }
    },

    "OpenShiftNodeASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": {
          "Ref": "NumberOfNodes"
        },
        "MaxSize": "10",
        "MinSize": "1",
        "LaunchConfigurationName": {
          "Ref": "OpenShiftNodesLaunchConfig"
        },
        "Tags": [{
          "Key": "Name",
          "PropagateAtLaunch": "true",
          "Value": "openshift-nodes"
        }],
        "VPCZoneIdentifier": [
          {"Ref": "PublicSubnet1ID"},
          {"Ref": "PublicSubnet2ID"}
        ]
      }
    },

    "OpenShiftNodesLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "quickstart": ["GetPublicKey", "AddPublicKey", "rpms", "ConfigSSHD", "DockerGroup", "DockerSecurity", "InstallAWSCLI", "StartServices"]
          },
          "rpms": {
            "packages": {
              "yum": {
                "epel-release": [],
                "NetworkManager": [],
                "ansible": [],
                "docker": [],
                "git": [],
                "python-boto": [],
                "python-cryptography": [],
                "python-lxml": [],
                "python-pip": [],
                "origin-docker-excluder": [],
                "centos-release-openshift-origin": [],
                "atomic-openshift-utils": [],
                "origin-clients": []
              }
            }
          },
          "GetPublicKey": {
            "files": {
              "/root/.ssh/public.key": {
                "content": {
                  "Fn::Join": ["", [
                    "#QuickStart Generated\n",
                    {
                      "Fn::GetAtt": ["GetRSA", "PUB"]
                    },
                    "\n"
                  ]]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "AddPublicKey": {
            "commands": {
              "append-publickey": {
                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                "ignoreErrors": "false"
              }
            }
          },
          "ConfigSSHD": {
            "commands": {
              "allow-root-login": {
                "command": "sed -i -- \"s/#PermitRootLogin yes/PermitRootLogin yes/g\" /etc/ssh/sshd_config && sed -i -- \"s/PasswordAuthentication no/#PasswordAuthentication no/g\" /etc/ssh/sshd_config",
                "ignoreErrors": "false"
              }
            }
          },
          "DockerGroup": {
            "commands": {
              "add-centos-to-docker": {
                "command": "sudo groupadd docker && sudo usermod -aG docker centos",
                "ignoreErrors": "false"
              }
            }
          },
          "DockerSecurity": {
            "commands": {
              "Add-network-to-docker": {
                "command": "echo 'INSECURE_REGISTRY=\"--insecure-registry 172.30.0.0/16\"' >> /etc/sysconfig/docker",
                "ignoreErrors": "false"
              }
            }
          },
          "InstallAWSCLI": {
            "commands": {
              "install-aws-cli": {
                "command": "pip install awscli --upgrade --user",
                "ignoreErrors": "false"
              }
            }
          },
          "StartServices": {
            "commands": {
              "start_enable_nm": {
                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager && systemctl enable docker && systemctl start docker && systemctl restart sshd",
                "ignoreErrors": "false"
              }
            }
          }
        }

      },
      "Properties": {

        "AssociatePublicIpAddress" : "true",
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "CENTOS7HVM"
          ]
        },
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/sda1",
          "Ebs": {
            "VolumeSize": "100",
            "VolumeType": "gp2"
          }
        },
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "VolumeSize": "110",
              "VolumeType": "gp2"
            }
          }
        ],
        "InstanceMonitoring": "true",
        "IamInstanceProfile": {
          "Ref": "SetupRoleProfile"
        },
        "InstanceType": {
          "Ref": "NodesInstanceType"
        },
        "SecurityGroups": [{
          "Ref": "OpenShiftSecurityGroup"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash -v\n",

                "export PEM=\"", { "Fn::GetAtt": ["GetRSA", "PEM"] }, "\"\n",
                "export PUB=\"", { "Fn::GetAtt": ["GetRSA", "PUB"] }, "\"\n",
                "export REGION=", { "Ref" : "AWS::Region"}, "\n",
                "export AZ=\"$( curl http://169.254.169.254/latest/meta-data/placement/availability-zone/ )\"\n",
                "export INSTANCE_ID=\"$( curl http://169.254.169.254/latest/meta-data/instance-id/ )\"\n",
                "export HOSTNAME=\"$( curl http://169.254.169.254/latest/meta-data/local-hostname/ )\"\n",
                "export DESIRED=", { "Ref" : "NumberOfNodes"}, "\n",
                "export NODE_TYPE=NODE\n",
                "export SHELL=/bin/bash\n",
                "export USER=root\n",
                "export PATH=$PATH:/sbin:/bin:/root/bin\n",

                "\n",
                "yum install -y epel-release\n",
                "yum update -y\n",
                "yum install -y git docker python-boto pyOpenSSL openssl-dev httpd-tools python-cryptography python-lxml NetworkManager unzip\n",
                "yum install -y python-pip  python-passlib java-1.8.0-openjdk-headless ntp chrony centos-release-openshift-origin37\n",

                "#packages for docker 1.12.6\n",
                "#yum install -y yum-utils\n",
                "#yum-config-manager --add-repo https://yum.dockerproject.org/repo/main/centos/7\n",
                "#yum -y update\n",
                "#yum -y --nogpgcheck install docker-engine-1.12.6-1.el7.centos.x86_64\n",
                "#systemctl start docker\n",

                "#packages for ansible\n",
                "yum install -y python-crypto python-httplib2 python-keyczar python-paramiko python2-jmespath sshpass bash-completion conntrack-tools socat libpthread.so.0\n",

                "rpm -i http://cbs.centos.org/kojifiles/packages/ansible/2.5.2/1.el7/noarch/ansible-2.5.2-1.el7.noarch.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/x86_64/origin-clients-3.7.2-1.el7.git.0.cd74924.x86_64.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/x86_64/origin-3.7.2-1.el7.git.0.cd74924.x86_64.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/noarch/origin-docker-excluder-3.7.2-1.el7.git.0.cd74924.noarch.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/noarch/origin-excluder-3.7.2-1.el7.git.0.cd74924.noarch.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/x86_64/tuned-profiles-origin-node-3.7.2-1.el7.git.0.cd74924.x86_64.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/x86_64/origin-node-3.7.2-1.el7.git.0.cd74924.x86_64.rpm\n",

                "pip install awscli\n",

                "systemctl enable NetworkManager\n",
                "systemctl start NetworkManager\n",

                "VOL_ID=$( aws ec2 create-volume ",
                "  --region ${REGION} --availability-zone ${AZ} ",
                "  --volume-type gp2 --size ", { "Ref" : "VolumeSize" }, " ${ENC_ARGS} ",
                " | grep VolumeId | cut -d \\\" -f 4 )\n",

                "aws ec2 create-tags --region ${REGION}  --resources ${VOL_ID} --tags Key=Name,Value='",
                { "Fn::Join" : [ " - ", [ { "Ref": "AWS::StackName" }, "NuoDB Node Volume" ] ] } ,"'\n",

                "sleep 10\n",
                "while ! [ \"available\" = $(aws ec2 describe-volumes --region ${REGION} --volume-ids ${VOL_ID} --query Volumes[0].State | tr \\\" ' ' ) ]; do\n",
                "   sleep 1;\n",
                "done\n",

                "aws ec2 attach-volume --region ${REGION}  ",
                "  --volume-id ${VOL_ID} --instance-id ${INSTANCE_ID} ",
                "  --device /dev/xvdf \n",

                "aws ec2 modify-instance-attribute --region ${REGION} ",
                "  --instance-id $INSTANCE_ID --block-device-mappings ",
                "  '[{\"DeviceName\":\"/dev/xvdf\",\"Ebs\": {\"DeleteOnTermination\":true} }]'\n",

                "while ! [ -r /dev/xvdf ]; do sleep 1; done\n",
                "/sbin/mkfs.ext4 /dev/xvdf && mount /dev/xvdf /local\n",

                "aws ec2 describe-volumes --region ${REGION} --volume-ids ${VOL_ID} \n",

                "aws s3 sync s3://", { "Ref" : "Bucket"}, "/templates/", { "Ref" : "EcsClusterName"}, "/scripts /local/scripts\n",
                "aws s3 sync s3://", { "Ref" : "Bucket"}, "/templates/", { "Ref" : "EcsClusterName"}, "/ansible /local/ansible\n",

                "chmod +x -R /local/scripts\n",

                "curl -LS https://github.com/openshift/openshift-ansible/archive/openshift-ansible-3.9.0-0.46.0.tar.gz -o /tmp/openshift-ansible.tgz\n",
                "mkdir /local/openshift-ansible && tar -zxvf /tmp/openshift-ansible.tgz -C /local/openshift-ansible --strip-components=1\n",

                "chmod +x -R /local/scripts\n",

                "bash /local/scripts/openshift-origin-bootstrap-master.sh"
              ]
            ]
          }
        }
      }
    },

    "OpenShiftMasterASLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "quickstart": ["GetPublicKey", "AddPublicKey", "rpms", "ConfigSSHD", "DockerGroup", "DockerSecurity", "InstallAWSCLI", "SetPrivateKey", "StartServices"]
          },
          "rpms": {
            "packages": {
              "yum": {
                "epel-release": [],
                "NetworkManager": [],
                "ansible": [],
                "docker": [],
                "git": [],
                "python-boto": [],
                "python-cryptography": [],
                "python-lxml": [],
                "python-pip": [],
                "origin-docker-excluder": [],
                "centos-release-openshift-origin": [],
                "atomic-openshift-utils": [],
                "origin-clients": [],
                "awslogs" : []
              }
            }
          },

          "setup_cloudwatch_logs" : {

            "files" : {
              "/etc/awslogs/awslogs.conf": {
                "content": { "Fn::Join": [ "", [
                  "[general]\n",
                  "state_file= /var/lib/awslogs/agent-state\n\n",

                  "[/var/log/messages]\n",
                  "file = /var/log/messages\n",
                  "log_group_name = ", { "Ref" : "CWLogGroup" }, "\n",
                  "log_stream_name = nuodb/{instance_id}/messages\n",
                  "#datetime_format = %Y-%m-%d %H:%M:%S,%f\n\n",

                  "[/var/log/cloud-init]\n",
                  "file = /var/log/cloud-init.*\n",
                  "log_group_name = ", { "Ref" : "CWLogGroup" }, "\n",
                  "log_stream_name = nuodb/{instance_id}/cloud-init.log\n",
                  "#datetime_format = %Y-%m-%d %H:%M:%S,%f\n\n",

                  "[/var/log/cloud-init-output]\n",
                  "file = /var/log/cloud-init-output.*\n",
                  "log_group_name = ", { "Ref" : "CWLogGroup" }, "\n",
                  "log_stream_name = nuodb/{instance_id}/cloud-init-output.log\n",
                  "#datetime_format = %Y-%m-%d %H:%M:%S,%f\n\n",

                  "[/var/log/cfn-init]\n",
                  "file = /var/log/cfn-init.log*\n",
                  "log_group_name = ", { "Ref" : "CWLogGroup" }, "\n",
                  "log_stream_name = nuodb/{instance_id}/cfn-init.log\n",
                  "#datetime_format = %Y-%m-%d %H:%M:%S,%f\n\n",

                  "[/var/log/cfn-init-cmd]\n",
                  "file = /var/log/cfn-init-cmd.log*\n",
                  "log_group_name = ", { "Ref" : "CWLogGroup" }, "\n",
                  "log_stream_name = nuodb/{instance_id}/cfn-init-cmd.log\n",
                  "#datetime_format = %Y-%m-%d %H:%M:%S,%f\n\n",

                  "[/var/log/docker]\n",
                  "file = /var/log/docker\n",
                  "log_group_name = ", { "Ref" : "CWLogGroup" }, "\n",
                  "log_stream_name = nuodb-docker/{instance_id}/docker-daemon\n",
                  "#datetime_format = %Y-%m-%d %H:%M:%S,%f\n\n",

                  "[/var/log/docker-logs-output]\n",
                  "file = /var/log/docker-logs-output\n",
                  "log_group_name = ", { "Ref" : "CWLogGroup" }, "\n",
                  "log_stream_name = nuodb-docker/{instance_id}/docker-logs-output\n",
                  "#datetime_format = %Y-%m-%d %H:%M:%S,%f\n\n"

                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/etc/awslogs/awscli.conf": {
                "content": { "Fn::Join": [ "", [
                  "[plugins]\ncwlogs = cwlogs\n[default]\nregion = ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            },

            "services" : {
              "sysvinit" : {
                "awslogs" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["/etc/awslogs/awslogs.conf"]
                }
              }
            }
          },

          "install_cfn_hup" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n",
                  "verbose=true\n",
                  "interval=5\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.NuoDBSMLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource OpenShiftMasterASLaunchConfig ",
                  "         --configsets quickstart ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          },

          "GetPublicKey": {
            "files": {
              "/root/.ssh/public.key": {
                "content": {
                  "Fn::Join": ["", [
                    "#QuickStart Generated\n",
                    { "Fn::GetAtt": ["GetRSA", "PUB"] },
                    "\n"
                  ]]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "AddPublicKey": {
            "commands": {
              "append-publickey": {
                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                "ignoreErrors": "false"
              }
            }
          },
          "SetPrivateKey": {
            "files": {
              "/root/.ssh/id_rsa": {
                "content": {
                  "Fn::Join": ["", [{
                    "Fn::GetAtt": ["GetRSA", "PEM"]
                  },
                    "\n"
                  ]]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "ConfigSSHD": {
            "commands": {
              "allow-root-login": {
                "command": "sed -i -- \"s/#PermitRootLogin yes/PermitRootLogin yes/g\" /etc/ssh/sshd_config && sed -i -- \"s/PasswordAuthentication no/#PasswordAuthentication no/g\" /etc/ssh/sshd_config",
                "ignoreErrors": "false"
              }
            }
          },
          "DockerGroup": {
            "commands": {
              "add-centos-to-docker": {
                "command": "sudo groupadd docker && sudo usermod -aG docker centos",
                "ignoreErrors": "false"
              }
            }
          },
          "DockerSecurity": {
            "commands": {
              "Add-network-to-docker": {
                "command": "echo 'INSECURE_REGISTRY=\"--insecure-registry 172.30.0.0/16\"' >> /etc/sysconfig/docker",
                "ignoreErrors": "false"
              }
            }
          },
          "InstallAWSCLI": {
            "commands": {
              "install-aws-cli": {
                "command": "pip install awscli --upgrade --user",
                "ignoreErrors": "false"
              }
            }
          },
          "StartServices": {
            "commands": {
              "start_enable_nm": {
                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager && systemctl enable docker && systemctl start docker && systemctl restart sshd",
                "ignoreErrors": "false"
              }
            }
          }
        }

      },
      "Properties": {
        "AssociatePublicIpAddress" : "true",
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "CENTOS7HVM"
          ]
        },
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/sda1",
          "Ebs": {
            "VolumeSize": "100"
          }
        }],
        "InstanceMonitoring": "true",
        "IamInstanceProfile": {
          "Ref": "SetupRoleProfile"
        },
        "InstanceType": {
          "Ref": "MasterInstanceType"
        },
        "SecurityGroups": [{
          "Ref": "OpenShiftSecurityGroup"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash -v\n",

                "export PEM=\"", { "Fn::GetAtt": ["GetRSA", "PEM"] }, "\"\n",
                "export PUB=\"", { "Fn::GetAtt": ["GetRSA", "PUB"] }, "\"\n",
                "export REGION=", { "Ref" : "AWS::Region"}, "\n",
                "export NODEASGID=",  { "Ref" : "OpenShiftNodeASG"}, "\n",
                "export AZ=\"$( curl http://169.254.169.254/latest/meta-data/placement/availability-zone/ )\"\n",
                "export INSTANCE_ID=\"$( curl http://169.254.169.254/latest/meta-data/instance-id/ )\"\n",
                "export HOSTNAME=\"$( curl http://169.254.169.254/latest/meta-data/local-hostname/ )\"\n",
                "export DESIRED=", { "Ref" : "NumberOfNodes"}, "\n",
                "export NODE_TYPE=MASTER\n",
                "export SHELL=/bin/bash\n",
                "export USER=root\n",
                "export PATH=$PATH:/sbin:/bin:/root/bin\n",

                "export OPENSHIFTURL=", { "Fn::If": ["HasHostedZone", {"Ref": "OpenShiftCNAME"}, { "Fn::GetAtt" : ["OpenShiftMasterELB", "DNSName"] }]}, "\n",

                "\n",
                "yum install -y epel-release\n",
                "yum update -y\n",
                "yum install -y git docker python-boto pyOpenSSL openssl-dev httpd-tools python-cryptography python-lxml NetworkManager unzip\n",
                "yum install -y python-pip python-passlib java-1.8.0-openjdk-headless ntp chrony centos-release-openshift-origin37\n",

                "#packages for docker 1.12.6\n",
                "#yum install -y yum-utils\n",
                "#yum-config-manager --add-repo https://yum.dockerproject.org/repo/main/centos/7\n",
                "#yum -y update\n",
                "#yum -y --nogpgcheck install docker-engine-1.12.6-1.el7.centos.x86_64\n",
                "#systemctl start docker\n",

                "#packages for ansible\n",
                "yum install -y python-crypto python-httplib2 python-keyczar python-paramiko python2-jmespath sshpass bash-completion conntrack-tools socat\n",

                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/x86_64/origin-clients-3.7.2-1.el7.git.0.cd74924.x86_64.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/x86_64/origin-3.7.2-1.el7.git.0.cd74924.x86_64.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/ansible/2.5.2/1.el7/noarch/ansible-2.5.2-1.el7.noarch.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/noarch/origin-docker-excluder-3.7.2-1.el7.git.0.cd74924.noarch.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/noarch/origin-excluder-3.7.2-1.el7.git.0.cd74924.noarch.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/x86_64/tuned-profiles-origin-node-3.7.2-1.el7.git.0.cd74924.x86_64.rpm\n",
                "rpm -i http://cbs.centos.org/kojifiles/packages/origin/3.7.2/1.el7.git.0.cd74924/x86_64/origin-node-3.7.2-1.el7.git.0.cd74924.x86_64.rpm\n",
                "pip install awscli\n",

                "systemctl enable NetworkManager\n",
                "systemctl start NetworkManager\n",
                "timedatectl set-ntp true\n",
                "systemctl enable ntpd\n",
                "systemctl start ntpd\n",
                "systemctl unmask chronyd\n",
                "systemctl restart chronyd\n",

                "VOL_ID=$( aws ec2 create-volume ",
                "  --region ${REGION} --availability-zone ${AZ} ",
                "  --volume-type gp2 --size ", { "Ref" : "VolumeSize" }, " ${ENC_ARGS} ",
                " | grep VolumeId | cut -d \\\" -f 4 )\n",

                "aws ec2 create-tags --region ${REGION}  --resources ${VOL_ID} --tags Key=Name,Value='",
                { "Fn::Join" : [ " - ", [ { "Ref": "AWS::StackName" }, "NuoDB Node Volume" ] ] } ,"'\n",

                "sleep 10\n",
                "while ! [ \"available\" = $(aws ec2 describe-volumes --region ${REGION} --volume-ids ${VOL_ID} --query Volumes[0].State | tr \\\" ' ' ) ]; do\n",
                "   sleep 1;\n",
                "done\n",

                "aws ec2 attach-volume --region ${REGION}  ",
                "  --volume-id ${VOL_ID} --instance-id ${INSTANCE_ID} ",
                "  --device /dev/xvdf \n",

                "aws ec2 modify-instance-attribute --region ${REGION} ",
                "  --instance-id $INSTANCE_ID --block-device-mappings ",
                "  '[{\"DeviceName\":\"/dev/xvdf\",\"Ebs\": {\"DeleteOnTermination\":true} }]'\n",

                "while ! [ -r /dev/xvdf ]; do sleep 1; done\n",
                "/sbin/mkfs.ext4 /dev/xvdf && mount /dev/xvdf /local\n",

                "aws ec2 describe-volumes --region ${REGION} --volume-ids ${VOL_ID} \n",

                "aws s3 sync s3://", { "Ref" : "Bucket"}, "/templates/", { "Ref" : "EcsClusterName"}, "/scripts /local/scripts\n",
                "aws s3 sync s3://", { "Ref" : "Bucket"}, "/templates/", { "Ref" : "EcsClusterName"}, "/ansible /local/ansible\n",

                "chmod +x -R /local/scripts\n",

                "curl -LS https://github.com/openshift/openshift-ansible/archive/openshift-ansible-3.9.0-0.46.0.tar.gz -o /tmp/openshift-ansible.tgz\n",
                "mkdir /local/openshift-ansible && tar -zxvf /tmp/openshift-ansible.tgz -C /local/openshift-ansible --strip-components=1\n",

                "#workaroud\n",
                "sed -i -- \"s/True/False/g\" /local/openshift-ansible/roles/openshift_clock/defaults/main.yml\n",
                "#disable tuned role\n",
                "#sed -i -- \"s/- role: tuned/#- role: tuned/g\" /local/openshift-ansible/playbooks/openshift-node/private/configure_nodes.yml\n",

                "bash /local/scripts/openshift-origin-bootstrap-master.sh\n",

                "ansible-playbook -i /local/ansible/inventory/hosts.cluster /local/openshift-ansible/playbooks/prerequisites.yml \n",

                "ansible-playbook -i /local/ansible/inventory/hosts.cluster /local/openshift-ansible/playbooks/deploy_cluster.yml -vvv \n",

                "bash /local/scripts/configure_openebs.sh\n"
              ]
            ]
          }
        }
      }
    },
    "OpenShiftMasterELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "ConnectionSettings": {
          "IdleTimeout": 1200
        },
        "CrossZone": true,
        "Subnets": [
          {"Ref": "PublicSubnet1ID"},
          {"Ref": "PublicSubnet2ID"}
        ],
        "SecurityGroups": [{
          "Ref": "OpenShiftSecurityGroup"
        }],
        "Listeners": [{
          "InstancePort": "9000",
          "InstanceProtocol": "TCP",
          "LoadBalancerPort": "9000",
          "Protocol": "TCP"
        },
          {
            "InstancePort": "8443",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "8443",
            "Protocol": "TCP"
          },
          {
            "InstancePort": "80",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "80",
            "Protocol": "TCP"
          },
          {
            "InstancePort": "443",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "443",
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:22",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "3",
          "Interval": "30",
          "Timeout": "3"
        }
      }
    },
    "OpenShiftCNAME" : {
      "Condition" : "HasHostedZone",
      "DependsOn" : "OpenShiftMasterELB",
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : { "Fn::Join" : [ "", [ { "Ref" : "Hostname" }, "." ] ]
        },
        "Comment" : "CNAME for Storefront ELB.",
        "Name" : { "Fn::Join": ["", [{"Ref" : "CustomerID"}, ".", { "Ref" : "Hostname" }, "." ]]},
        "Type" : "CNAME",
        "TTL" : "300",
        "ResourceRecords" : [ { "Fn::GetAtt" : ["OpenShiftMasterELB", "DNSName"] } ]
      }
    }
  },
  "Outputs": {
    "OpenShiftUI": {
      "Description": "The URL OpenShiftUI",
      "Value" : { "Fn::If": [ "HasHostedZone",
        { "Fn::Join": [ "", [ "https://", {"Ref": "OpenShiftCNAME"}, ":8443/" ]]},
        { "Fn::Join": [ "", [ "https://", { "Fn::GetAtt" : ["OpenShiftMasterELB", "DNSName"] }, ":8443/" ]]}]
      }
    }
  }
}
